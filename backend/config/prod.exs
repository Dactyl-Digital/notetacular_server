use Mix.Config

# I think this prod file and the releases file will be
# ran on release start in prod deploy... but not sure.
# ah yes... This does get executed at step 20/29 during the docker
# build process.
IO.puts("INSIDE ./backend PROD CONFIG!!!")

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# BackendWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :backend, BackendWeb.Endpoint,
  load_from_system_env: true,
  url: [
    host: Application.get_env(:backend, :app_hostname),
    port: Application.get_env(:backend, :app_port)
  ]

config :backend, :ecto_repos, [Dbstore.Repo]

config :backend, Backend.Mailer,
  adapter: Bamboo.MailgunAdapter,
  api_key: Application.get_env(:backend, :mailgun_key),
  domain: Application.get_env(:backend, :mailgun_domain),
  base_uri: "https://api.mailgun.net/v3"

# config :dbstore, Dbstore.Repo,
#   adapter: Ecto.Adapters.Postgres,
#   database: "notastical_test",
#   username: "jamesgood",
#   password: "postgres",
#   hostname: "localhost",
#   pool_size: 12

# Config for DB and Email read from releases.exs instead...
# config :dbstore, Dbstore.Repo,
#   adapter: Ecto.Adapters.Postgres,
#   database: System.get_env("RDS_DB_NAME"),
#   username: System.get_env("RDS_USERNAME"),
#   password: System.get_env("RDS_PASSWORD"),
#   hostname: System.get_env("RDS_HOSTNAME"),
#   pool_size: 20,
#   show_sensitive_data_on_connection_error: true

# config :backend, Backend.Mailer,
#   adapter: Bamboo.MandrillAdapter,
#   # Application.get_env(:backend, :mandrill_key)
#   api_key: System.get_env("MANDRILL_KEY")

# NOTE: Upon starting the released app. It said to remove this.
# cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
# NOTE: Jose Valim mentions in this issue that it is okay to leave this on in prod...
# What does it do?
# https://github.com/elixir-ecto/postgrex/issues/446#issuecomment-472029316
config :logger, handle_sasl_reports: true

# NOTE: Copied this over from the dev.to elixir/docker deployment blog post
#       Starting the mix release wouldn't have the app listening on the port
#       w/out this line.
# Which server to start per endpoint:
config :backend, BackendWeb.Endpoint, server: true

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :backend, BackendWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :backend, BackendWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :backend, BackendWeb.Endpoint, server: true
#

# Finally import the config/prod.secret.exs
# which should be versioned separately.
# import_config "prod.secret.exs"
